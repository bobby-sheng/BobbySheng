[{"content":"0 前言 本文内容比较杂乱, 无法保证实时更新, 如果遇到问题, 可以在 github 查看最新的配置:\nhugo 相关配置 docker 相关配置 研究 hugo 建站之初是打算采用 Github Pages 来发布静态博客\n优点 仅需一个 github 账号和简单配置即可将静态博客发布到 github pages 没有维护的时间成本, 可以将精力更多的放到博客内容本身上去 无需备案 无需 ssl 证书 缺点 访问速度较慢 访问速度较慢 访问速度较慢 虽说访问速度较慢可以通过各家的 cdn 加速来解决, 但由于刚开始建立 blog 选择的是 wordpress, 域名, 服务器, 备案, 证书等都已经一应俱全, 且之前的架构采用 docker, 添加一台 nginx 来跑 hugo 的静态网站是很方便的\n1 将博客部署到阿里云 整个步骤最难的地方可能就是 docker-compose 和 nginx 的配置了, 如果之前没有接触过可能会比较吃力, 因此我打包了一份开袋即食的配置文件, 只需要修改一些必要配置, 点此链接下载\n下载完将压缩包上传到自己的服务器, 解压后重命名为 blog (当然你可以用其他名字)\n下面正式开始部署:\n确保服务器公网 ip、安全组权限 (80/443), 域名绑定, ssl 证书等基础配置已经一应俱全 确保服务器安装了 docker 和 docker-compose 修改 blog/conf/nginx-hugo/nginx.conf 和 blog/conf/nginx-proxy/default.conf, 需要修改的地方在文件中已经标注出来了 将你的 ssl 证书放到 blog/ssl/ 目录下 在 blog 目录下执行 docker-compose up -d 即可启动容器 配置 twikoo 的前端代码, 见本文章节 3.2 将 hugo 生成的静态文件上传到 blog/data/hugo/ 目录, 见本文章节 2 至此已经配置完成, 应该可以通过域名访问 hugo 站点了, 后续更新内容只需要重复最后一步, 将 hugo 生成的静态文件上传到服务器即可\n所有的配置、应用数据、日志都保存在 blog 目录下, 你可以在不同的服务器上快速迁移 hugo 环境, 无需担心后续想要迁移新服务器时遇到的各种问题\n2 workflow 在这里简单介绍一下我从写博客 -\u0026gt; 发布到服务器 -\u0026gt; 归档备份的整个流程\n总体流程:\nobsidian 编辑文章, 图片通过 Image Auto Upload Plugin 插件配合 piclist 上传到阿里云 OSS, 具体配置和操作见 docker 部署 piclist 编辑完成后将通过 此脚本 将编辑后的文章更新到 hugo site 目录, 同时也是 git 仓库 使用 hugo server -D 预览变更, 如有问题重复前两个步骤 确认无误后通过 此脚本 生成静态文件, 并将文件远程同步到公网服务器, 完成博客内容变更 最后将 git 仓库的变更提交后同步到 github 远程仓库, 完成归档备份 其实如果使用 vscode 直接编辑 git 仓库中的博客文章可以让整个流程更加简化, 但是 vscode 的 markdown 编辑体验实在是比不上 typora 或者 obsidian, 工欲善其事必先利其器, 有了好的编辑体验才更愿意输出内容\n3 twikoo 3.1 部署 twikoo 官方提供了 丰富的部署方式, 考虑到访问速度, 本文使用的是 docker 方式部署到阿里云服务器\n如果是使用本文章节 1 步骤中的配置文件部署了 twikoo, 这步直接忽略, 配置前端代码即可\ndocker run --name twikoo -e TWIKOO_THROTTLE=1000 -p 8080:8080 -v ${PWD}/data:/app/data -d imaegoo/twikoo 部署完成后看到如下结果即成功\n[root@Bobby ~]# curl http://localhost:8080 {\u0026#34;code\u0026#34;:100, \u0026#34;message\u0026#34;:\u0026#34;Twikoo 云函数运行正常, 请参考 https://twikoo.js.org/quick-start.html#%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2 完成前端的配置\u0026#34;, \u0026#34;version\u0026#34;:\u0026#34;1.6.7\u0026#34;} 后续最好套上反向代理, 加上域名和证书\n3.2 前端代码 创建或者修改 layouts\\partials\\comments.html\n\u0026lt;!-- Twikoo --\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;pagination__title\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;pagination__title-h\u0026#34; style=\u0026#34;font-size: 20px;\u0026#34;\u0026gt;💬评论\u0026lt;/span\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;tcomment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/twikoo/{{ .Site.Params.twikoo.version }}/twikoo.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; twikoo.init({ envId: \u0026#34;\u0026#34;, //填自己的, 例如：https://example.com el: \u0026#34;#tcomment\u0026#34;, lang: \u0026#39;zh-CN\u0026#39;, path: window.TWIKOO_MAGIC_PATH||window.location.pathname, }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; 调用上述 twikoo 代码的位置：layouts/_default/single.html\n\u0026lt;article class=\u0026#34;post-single\u0026#34;\u0026gt; // 其他代码...... {{- if (.Param \u0026#34;comments\u0026#34;) }} {{- partial \u0026#34;comments.html\u0026#34; . }} {{- end }} \u0026lt;/article\u0026gt; 在站点配置文件 config 中加上版本号\nparams: twikoo: version: 1.6.7 3.3 更新 修改 dockerfile.yml 中的镜像 tag 部署新版本容器 docker-compose up -d 在 hugo 配置文件 config.yml 中修改 twikoo 版本 3.4 修改数据 直接修改 blog/data/twikoo/ 目录下的文件后重启容器, ❗慎重修改\n3.5 修改 smms 图床的 api 地址 已于 1.6.12 新版本修复, https://github.com/imaegoo/twikoo/releases/tag/1.6.12\n由于 sm.ms 域名国内无法访问, twikoo 官方还没有出具体的修改方式, 自己修改容器配置文件进行修改\n# 复制配置文件 [root@Bobby blog]# docker cp twikoo:/app/node_modules/twikoo-func/utils/image.js /root/blog/conf/twikoo/ # 修改配置文件, 原来的配置是 https://sm.ms/api.v2/upload [root@Bobby blog]# grep smms conf/twikoo/image.js } else if (config.IMAGE_CDN === \u0026#39;smms\u0026#39;) { const uploadResult = await axios.post(\u0026#39;https://smms.app/api/v2/upload\u0026#39;, formData, { # 将配置文件映射进容器内, 重启容器即可 [root@Bobby blog]# grep twikoo docker-compose.yml twikoo: image: imaegoo/twikoo container_name: twikoo - $PWD/data/twikoo:/app/data - $PWD/conf/twikoo/image.js:/app/node_modules/twikoo-func/utils/image.js 4 Artitalk 官方文档\n需要注意的是如果使用的是国际版的 LeadCloud, 需要绑定自定义域名后才能正常访问\n4.1 leancloud 配置 前往 LeanCloud 国际版, 注册账号 注册完成之后根据 LeanCloud 的提示绑定手机号和邮箱 绑定完成之后点击 创建应用, 应用名称随意, 接着在 结构化数据 中创建 class, 命名为 shuoshuo 在你新建的应用中找到 结构化数据 下的 用户 点击 添加用户, 输入想用的用户名及密码 回到 结构化数据 中, 点击 class 下的 shuoshuo 找到权限, 在 Class 访问权限 中将 add_fields 以及 create 权限设置为指定用户, 输入你刚才输入的用户名会自动匹配为了安全起见, 将 delete 和 update 也设置为跟它们一样的权限 然后新建一个名为 atComment 的 class, 权限什么的使用默认的即可 点击 class 下的 _User 添加列, 列名称为 img, 默认值填上你这个账号想要用的发布说说的头像 url, 这一项不进行配置, 说说头像会显示为默认头像 —— Artitalk 的 logo 在最菜单栏中找到设置 -\u0026gt; 应用 keys, 记下来 AppID 和 AppKey , 一会会用 最后将 _User 中的权限全部调为指定用户, 或者数据创建者, 为了保证不被篡改用户数据以达到强制发布说说 在设置 -\u0026gt;域名绑定中绑定自定义域名 ❗ 关于设置权限的这几步 这几步一定要设置好, 才可以保证不被 “闲人” 破解发布说说的验证\n4.2 hugo 配置 新增 content/talk.md 页面, 内容如下, 注意修改标注的内容, front-matter 的内容自行修改\n--- title: \u0026#34;💬 说说\u0026#34; date: 2021-08-31 hidemeta: true description: \u0026#34;胡言乱语\u0026#34; comments: true reward: false showToc: false TocOpen: false showbreadcrumbs: false --- \u0026lt;body\u0026gt; \u0026lt;!-- 引用 artitalk --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://unpkg.com/artitalk\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 存放说说的容器 --\u0026gt; \u0026lt;div id=\u0026#34;artitalk_main\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Artitalk({ appId: \u0026#39;**********\u0026#39;, // Your LeanCloud appId appKey: \u0026#39;************\u0026#39;, // Your LeanCloud appKey serverURL: \u0026#39;*********\u0026#39; // 绑定的自定义域名 }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 这个时候已经可以直接访问了, https://your.domain.com/talk\n输入 leancloud 配置步骤中的第 4 步配置的用户名密码登录后就可以发布说说了\n5 自定义 footer 自定义页脚内容\n添加完下面的页脚内容后要修改 assets\\css\\extended\\blank.css 中的 --footer-height 的大小, 具体数字需要考虑到行数和字体大小\n5.1 自定义徽标 徽标功能源自：https://shields.io/ 考虑到访问速度, 可以在生成完徽标后放到自己的 cdn 上\n在 layouts\\partials\\footer.html 中的 \u0026lt;footer\u0026gt; 添加如下\n\u0026lt;a href=\u0026#34;https://gohugo.io/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://img.shields.io/static/v1?\u0026amp;style=plastic\u0026amp;color=308fb5\u0026amp;label=Power by\u0026amp;message=hugo\u0026amp;logo=hugo\u0026#34; style=\u0026#34;display: unset;\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; 5.2 网站运行时间 在 layouts\\partials\\footer.html 中的 \u0026lt;footer\u0026gt; 添加如下\n起始时间自行修改\n\u0026lt;span id=\u0026#34;runtime_span\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt;function show_runtime(){window.setTimeout(\u0026#34;show_runtime()\u0026#34;, 1000);X=new Date(\u0026#34;7/13/2021 1:00:00\u0026#34;);Y=new Date();T=(Y.getTime()-X.getTime());M=24*60*60*1000;a=T/M;A=Math.floor(a);b=(a-A)*24;B=Math.floor(b);c=(b-B)*60;C=Math.floor((b-B)*60);D=Math.floor((c-C)*60);runtime_span.innerHTML=\u0026#34;网站已运行\u0026#34;+A+\u0026#34;天\u0026#34;+B+\u0026#34;小时\u0026#34;+C+\u0026#34;分\u0026#34;+D+\u0026#34;秒\u0026#34;}show_runtime();\u0026lt;/script\u0026gt; 5.3 访问人数统计 统计功能源自：http://busuanzi.ibruce.info/\n在 layouts\\partials\\footer.html 中的 \u0026lt;footer\u0026gt; 添加如下\n\u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\u0026#34;\u0026gt; 总访客数: \u0026lt;i class=\u0026#34;fa fa-user\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; | 总访问量: \u0026lt;i class=\u0026#34;fa fa-eye\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; | 本页访问量: \u0026lt;i class=\u0026#34;fa fa-eye\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; 6 自定义字体 可以使用一些在线的字体, 可能会比较慢, 推荐下载想要的字体放到自己的服务器或者 cdn 上\n修改 assets\\css\\extended\\fonts.css, 添加 @font-face\n@font-face { font-family: \u0026#34;LXGWWenKaiLite-Bold\u0026#34;; src: url(\u0026#34;https://your.domain.com/fonts/test.woff2\u0026#34;) format(\u0026#34;woff2\u0026#34;); font-display: swap; } 修改 assets\\css\\extended\\blank.css, 推荐将英文字体放在前面, 可以实现英文和中文使用不同字体\n.post-content { font-family: Consolas, \u0026#34;LXGWWenKaiLite-Bold\u0026#34;; //修改 } body { font-family: Consolas, \u0026#34;LXGWWenKaiLite-Bold\u0026#34;; //修改 } 7 修改链接颜色 在 hugo+papermod 默认配置下, 链接颜色是黑色字体带下划线的组合, 个人非常喜欢 typora-vue 的渲染风格 hugo官方文档 给出了通过 render hooks 覆盖默认的 markdown 渲染 link 的方式\n新建 layouts/_default/_markup/render-link.html 文件, 内容如下在官方给出的示例中添加了 style=\u0026quot;color:#42b983, 颜色可以自行修改\n\u0026lt;a href=\u0026#34;{{ .Destination | safeURL }}\u0026#34;{{ with .Title}} title=\u0026#34;{{ . }}\u0026#34;{{ end }}{{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34; style=\u0026#34;color:#42b983\u0026#34;;{{ end }}\u0026gt;{{ .Text | safeHTML }}\u0026lt;/a\u0026gt; 8 shortcode ppt、bilibili、youtube、豆瓣阅读和电影卡片\nmermaid\n图片画廊\n9 其他修改 其他 css 样式修改基本都是通过 f12 控制台一点点摸索改的, 不太规范且比较琐碎就不单独记录了, 其实我根本已经忘记还改了哪些东西\n以上\n","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/posts/blog/hello-hugo/","summary":"0 前言 本文内容比较杂乱, 无法保证实时更新, 如果遇到问题, 可以在 github 查看最新的配置: hugo 相关配置 docker 相关配置 研究 hugo 建站之初是打算采用 Github Pages 来发布静态博客 优点 仅需一个 github 账号和简单配置即可将静态博客发布到 github pages 没有维护的时间成本, 可以将精力更多的放到博客内容本身上去 无需备案 无需 ssl 证书 缺点 访问速度","title":"【置顶】Hello, hugo!"},{"content":"0 前言 python 虚拟环境的重要性已经无需多言了, 目前所有支持 python 虚拟环境的工具中最好用的应该就是 conda 了, 最重要的一点是可以一键创建不同版本的 python 环境以适应不同的需求.\nAnaconda 比较臃肿, 本文使用无 GUI 的 miniconda.\n环境:\nwin10 miniconda3-py11-23.5.2-0 1 安装 安装前需要确认一下系统及用户的环境变量中不要存在中文, 在 CMD 中直接执行 path 或者 git-bash 中执行 echo $PATH 进行确认, 这个问题当时被折磨疯了, 还给 conda 项目提了 issue.\n最新版下载地址\n选好路径直接下一步即可, 没有需要注意的自定义配置项\n2 配置 2.1 环境变量 在用户环境变量 PATH 添加如下项, 我的安装路径是 D:\\miniconda, 按实际情况修改\nD:\\software\\miniconda D:\\software\\miniconda\\Scripts D:\\software\\miniconda\\Library\\bin 添加完后重启系统, 让系统重新读取一下环境变量\n2.2 conda 配置 参考链接\nminiconda 默认没有 .condarc 配置文件, 需要生成一下\nconda config --set show_channel_urls yes .condarc 会生成到用户目录下\n$ cat .condarc channels: - defaults show_channel_urls: true default_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2 custom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud deepmodeling: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/ # 不自动激活 base 环境 auto_activate_base: false # 虚拟环境存放路径 envs_dirs: - D:\\software\\python\\envs # pkg 存放路径 pkgs_dirs: - D:\\software\\python\\pkgs 上述配置文件中主要配置了三项: conda 的清华国内源, 虚拟环境和 pkg 的存储路径\n如不配置创建虚拟环境时可能会生成到用户目录下, 导致系统盘臃肿, 建议新建一个目录专门存放\n2.3 pip 配置 系统中直接安装的 python, 其 pip 的配置文件一般存放在用户目录的 .pip/pip.ini, 使用 conda 创建的虚拟环境的 pip 则不同, 可以使用如下命令查看, 这个问题当时也折磨了我很久\n$ pip -v config list For variant \u0026#39;global\u0026#39;, will try loading \u0026#39;C:\\ProgramData\\pip\\pip.ini\u0026#39; For variant \u0026#39;user\u0026#39;, will try loading \u0026#39;C:\\Users\\Bobby\\pip\\pip.ini\u0026#39; For variant \u0026#39;user\u0026#39;, will try loading \u0026#39;C:\\Users\\Bobby\\AppData\\Roaming\\pip\\pip.ini\u0026#39; For variant \u0026#39;site\u0026#39;, will try loading \u0026#39;D:\\software\\miniconda\\pip.ini\u0026#39; 这里我们使用用户目录存放配置文件, 默认也是没有的\n$ cat pip/pip.ini [global] timeout = 6000 index-url = http://pypi.tuna.tsinghua.edu.cn/simple trusted-host = pypi.tuna.tsinghua.edu.cn proxy=http://127.0.0.1:7890 配置 pip 使用国内的清华源, 最后一条 proxy 可以不写, 这个问题是因为我常开代理, pip 默认用 https 访问系统代理, 导致 pip 报错.\n2.4 管理虚拟环境 上述步骤做完后就可以正式使用 conda 创建虚拟环境了\n用管理员打开 powershell 使用如下命令初始化 conda\nconda init powershell conda init cmd conda init bash 之后重新打开终端, 创建你的虚拟环境, -n 表示虚拟环境的名字, 不指定 python 版本默认最新\nconda create -n py37 python=3.7 激活虚拟环境\nconda activate py37 退出虚拟环境\nconda deactivate 查看虚拟环境列表\nconda env list 删除虚拟环境\nconda env remove -n py37 --all 3 其他 conda 最为人诟病的点应该是包管理跟 pip 可能会产生一些冲突, conda 官方给出的最佳方案是\n全程使用 conda install 来安装模块, 实在不行再用 pip 使用 conda 创建完虚拟环境后, 一直用 pip 来管理模块 pip 应使用 –upgrade-strategy only-if-needed 参数运行, 以防止通过 conda 安装的软件包进行不必要的升级. 这是运行 pip 时的默认设置, 不应更改 不要将 pip 与 –user 参数一起使用，避免所有用户安装 总结一下就是不要来回地用 pip 和 conda, 专一一点 (笑\n以上\n","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/posts/tech/windows-miniconda/","summary":"0 前言 python 虚拟环境的重要性已经无需多言了, 目前所有支持 python 虚拟环境的工具中最好用的应该就是 conda 了, 最重要的一点是可以一键创建不同版本的 python 环境以适应不同的需求. Anaconda 比较臃肿, 本文使用无 GUI 的 miniconda. 环境: win10 miniconda3-py11-23.5.2-0 1 安装 安装前需要确认一下系统及用户的环境变量中不要存在中文, 在 CMD 中直接执行 path 或者 git-bash 中执行 echo","title":"windows | miniconda 配置 python 虚拟环境"},{"content":"原题如下\n鬼谷子随意从 2-99 中选取了两个数。他把这两个数的和告诉了庞涓， 把这两个数的乘积告诉了孙膑。但孙膑和庞涓彼此不知道对方得到的数。第二天， 庞涓很有自信的对孙膑说：虽然我不知道这两个数是什么，但我知道你一定也不知道。随后，孙膑说：那我知道了。庞涓说：那我也知道了。这两个数是什么？\n代码示例\n#!/usr/bin/env python # -*- coding: utf-8 -*- \u0026#39;\u0026#39;\u0026#39; 第一步 庞告诉孙，已知和Sum满足有至少两种ab组合，且任意一组ab的乘积Pro都满足至少有两种ab组合，通过isPang函数将可能的ab组合放入abList_1 第二步 孙告诉庞，abList_1中的ab组合乘积得pro，该pro满足至少有两种ab组合，且所有的ab组合有且仅有一组ab组合满足isPang函数，通过isSun函数将abList中满足条件的ab组合放入abList_2，ab组合的积放入proList 第三步 庞告诉孙，abList_2中的ab组合相加得Sum，该Sum满足至少有两种ab组合，且所有的ab组合有且仅有一组ab所得乘积pro在proList中，将满足条件的ab组合放入abList，即最终答案 \u0026#39;\u0026#39;\u0026#39; # 根据给出的sum，遍历所有可能的a和b的组合 def getCombinationSum(sum): combination = [] for a in range(2, 100): for b in range(2, 100): if a + b == sum and a \u0026lt;= b: combination.append((a, b)) return combination # 根据给出的pro，遍历所有可能的a和b的组合 def getCombinationPro(pro): combination = [] for a in range(2, 100): for b in range(2, 100): if a * b == pro and a \u0026lt;= b: combination.append((a, b)) return combination def isPang(sum): \u0026#39;\u0026#39;\u0026#39; 第一步，传入的sum满足以下条件返回True，否则False: 1. 可以拆分成若干组ab的加和 2. 每一组拆分出来的ab乘积运算得pro，该pro满足有至少两组ab的乘积 \u0026#39;\u0026#39;\u0026#39; if len(getCombinationSum(sum)) \u0026lt; 2: return False else: combinationSum = getCombinationSum(sum) for i in combinationSum: status = 0 pro = i[0] * i[1] # 有其中一组ab不满足就打断循环 if len(getCombinationPro(pro)) \u0026lt; 2: status = 1 break if status == 0: return True else: return False def isSun(pro): \u0026#39;\u0026#39;\u0026#39; 第二步，传入的pro满足以下条件返回一组ab组合(元组)，否则False 1. 可以拆分成若干组ab的乘积 2. 每一组拆分出来的ab相加运算得sum，所有ab加和的sum有且仅有一个满足第一步的条件(放入isPang函数后返回True) \u0026#39;\u0026#39;\u0026#39; combination = [] combinationPro = getCombinationPro(pro) if len(combinationPro) \u0026gt; 1: for i in combinationPro: sum = i[0] + i[1] if isPang(sum): combination.append(i) if len(combination) == 1: return combination else: return False if __name__ == \u0026#39;__main__\u0026#39;: # 第一步 abList_1 = [] for sum in range(4, 198+1): if isPang(sum): abList_1 += getCombinationSum(sum) # 第二步 abList_2 = [] proList = [] for i in abList_1: pro = i[0] * i[1] if isSun(pro): abList_2.append(i) proList.append(pro) # 第三步 abList = [] for i in abList_2: sum = i[0] + i[1] n = 0 for j in getCombinationSum(sum): if j[0] * j[1] in proList: n += 1 if n == 1: abList.append(i) print(abList) 以上\n","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/posts/tech/python-logic-problem-guiguzi/","summary":"原题如下 鬼谷子随意从 2-99 中选取了两个数。他把这两个数的和告诉了庞涓， 把这两个数的乘积告诉了孙膑。但孙膑和庞涓彼此不知道对方得到的数。第二天， 庞涓很有自信的对孙膑说：虽然我不知道这两个数是什么，但我知道你一定也不知道。随后，孙膑说：那我知道了。庞涓说：那我也知道了。这两个数是什么？ 代","title":"python | 鬼谷子数学问题"},{"content":"示例代码\nimport os # 输入文件夹地址 path = \u0026#34;C://Users//Bobby//Desktop//Bobby.github.io//content//posts//read//\u0026#34; files = os.listdir(path) # 输出所有文件名，只是为了确认一下 for file in files: print(file) # 获取旧名和新名 i = 0 for file in files: # 旧名称的信息 old = path + os.sep + files[i] # 新名称的信息 new = path + os.sep + file.replace(\u0026#39;_\u0026#39;,\u0026#39;-\u0026#39;) # 新旧替换 print(new) os.rename(old,new) i+=1 以上\n","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/posts/tech/python-rename-file/","summary":"示例代码 import os # 输入文件夹地址 path = \u0026#34;C://Users//Bobby//Desktop//Bobby.github.io//content//posts//read//\u0026#34; files = os.listdir(path) # 输出所有文件名，只是为了确认一下 for file in files: print(file) # 获取旧名和新名 i = 0 for file in files: # 旧名称的信息 old = path + os.sep + files[i] # 新名称的信息 new = path + os.sep + file.replace(\u0026#39;_\u0026#39;,\u0026#39;-\u0026#39;) # 新旧替换 print(new) os.rename(old,new) i+=1 以上","title":"python | 批量修改目录下文件名"},{"content":"0 前言 感谢 piclist 作者的 不吝解答\n最近从 typora 迁移到了 obsidian, typora 可以很方便的自动调用 picgo 实现图片上传, obsidian 得益于丰富的插件市场, 可以通过 Image Auto Upload Plugin 插件调用 picgo, 但是必须手动启动 picgo 后才能正常使用\n在插件配置的注释中发现了 piclist, 经了解发现这个二开版本支持 docker 部署, 综合考虑了一下还是值得折腾一下的, 既能避免手动打开 picgo 的繁琐, 也可以在我所有的 pc 上卸载掉一个软件, 同时还能水一文\n注意本文以已有服务器/ip/域名且 web 服务使用 nginx 为前提, 如果不满足上述前提, 需要将 piclist 的 36677 端口映射到主机, 部署完 piclist 后直接通过 ip 加端口的形式调用即可\n1 部署 1.1 piclist 配置 docker-compose.yml 中添加如下配置\nversion: \u0026#39;3.1\u0026#39; services: piclist: image: \u0026#39;kuingsmile/piclist:v1.7.0\u0026#39; container_name: piclist restart: always networks: blog_net: ipv4_address: 172.19.0.5 volumes: - \u0026#39;$PWD/data/piclist:/root/.piclist\u0026#39; # 需要设置 piclist_key 环境变量 command: node /usr/local/bin/picgo-server -k ${piclist_key} networks: blog_net: driver: bridge ipam: config: - subnet: 172.19.0.0/16 添加环境变量并启动 piclist 容器, 此环境变量用于 client(obsidian) 和 piclist server 之间的鉴权\n# 将 123456 设置为自定义的密码 cat \u0026gt;\u0026gt; ${HOME}/.bash_profile \u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39; export piclist_key=\u0026#39;123456\u0026#39; EOF source ${HOME}/.bash_profile docker-compose up -d 修改 data/piclist/config.json 的配置, 以阿里云 OSS 为例添加图床配置, 内容自行修改, 官方没有配置文件的详细文档, 可以折中一下, 先 windows 安装 piclist, 测试无误后导出配置\n{ \u0026#34;picBed\u0026#34;: { \u0026#34;current\u0026#34;: \u0026#34;aliyun\u0026#34;, \u0026#34;uploader\u0026#34;: \u0026#34;aliyun\u0026#34;, \u0026#34;aliyun\u0026#34;: { \u0026#34;accessKeyId\u0026#34;: \u0026#34;******\u0026#34;, \u0026#34;accessKeySecret\u0026#34;: \u0026#34;******\u0026#34;, \u0026#34;bucket\u0026#34;: \u0026#34;Bobby-image\u0026#34;, \u0026#34;area\u0026#34;: \u0026#34;oss-cn-beijing\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;blog/\u0026#34;, \u0026#34;customUrl\u0026#34;: \u0026#34;https://image.Bobby.cn\u0026#34;, \u0026#34;options\u0026#34;: \u0026#34;\u0026#34; } }, \u0026#34;picgoPlugins\u0026#34;: {} } 最后再重启一下 piclist\ndocker restart piclist 1.2 nginx 配置 nginx 中添加如下 location 配置\nlocation /piclist/ { proxy_pass http://172.19.0.5:36677/; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Real-Port $remote_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header HTTP_X_FORWARDED_FOR $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $host; proxy_set_header X-NginX-Proxy true; proxy_set_header Accept-Encoding \u0026#34;br\u0026#34;; } 执行 docker restart nginx-proxy 重启 nginx\n最后修改 obsidian 的 Image auto upload Plugin 插件的配置\n打开远程服务器模式 将接口 url 设置为 https://\u0026lt;你的域名\u0026gt;/piclist/upload?key=\u0026lt;你的key\u0026gt;, 这里的 key 就是启动容器时配置的环境变量的值, 需注意如果 key 中有特殊字符需要 url 转义一下 最后测试一下图片上传即可, 如果有报错可以通过 docker logs -f piclist 查看日志\n2 常见问题 2.1 上传失败 obsdian 直接提示上传失败, 可能是 key 中有特殊字符没有转义或者没有打开远程服务器模式 日志中有如下 Unauthorized access 报错, 一般是 key 不匹配 2.2 忘记 piclist_key 如果已经启动了的容器可以通过如下命令查看\ndocker exec -it piclist ps -ef | grep -v grep | grep node 以上\n","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/posts/blog/docker-deploy-piclist/","summary":"0 前言 感谢 piclist 作者的 不吝解答 最近从 typora 迁移到了 obsidian, typora 可以很方便的自动调用 picgo 实现图片上传, obsidian 得益于丰富的插件市场, 可以通过 Image Auto Upload Plugin 插件调用 picgo, 但是必须手动启动 picgo 后才能正常使用 在插件配置的注释中发现了 piclist, 经了解发现这个二开版本支持 docker 部署, 综合考虑了一下还是值得折腾一下的, 既能避免手动打开 picgo 的繁","title":"docker 部署 piclist"},{"content":"1 清单 地址 中国科学技术大学 https://pypi.mirrors.ustc.edu.cn/simple 清华 https://pypi.tuna.tsinghua.edu.cn/simple 豆瓣 http://pypi.douban.com/simple 华中理工大学 http://pypi.hustunique.com/simple 山东理工大学 http://pypi.sdutlinux.org/simple 阿里云 https://mirrors.aliyun.com/pypi/simple/ 2 linux 环境 mkdir ~/.pip cat \u0026gt; ~/.pip/pip.conf \u0026lt;\u0026lt; EOF [global] trusted-host=mirrors.aliyun.com index-url=https://mirrors.aliyun.com/pypi/simple/ EOF 3 windows 环境 打开 cmd 使用 dos 命令 set 找到 userprofile 路径，在该路径下创建 pip 文件夹，在 pip 文件夹下创建 pip.ini\npip.ini 具体配置\n[global] timeout = 6000 index-url = https://pypi.tuna.tsinghua.edu.cn/simple trusted-host = pypi.tuna.tsinghua.edu.cn 以上\n","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/posts/tech/python-change-pip-repo/","summary":"1 清单 地址 中国科学技术大学 https://pypi.mirrors.ustc.edu.cn/simple 清华 https://pypi.tuna.tsinghua.edu.cn/simple 豆瓣 http://pypi.douban.com/simple 华中理工大学 http://pypi.hustunique.com/simple 山东理工大学 http://pypi.sdutlinux.org/simple 阿里云 https://mirrors.aliyun.com/pypi/simple/ 2 linux 环境 mkdir ~/.pip cat \u0026gt; ~/.pip/pip.conf \u0026lt;\u0026lt; EOF [global] trusted-host=mirrors.aliyun.com index-url=https://mirrors.aliyun.com/pypi/simple/ EOF 3 windows 环境 打开 cmd 使用 dos 命令 set 找到 userprofile 路径，在该路径下创建 pip 文件夹，在 pip 文件夹下创建 pip.ini pip.ini 具体配置 [global] timeout = 6000 index-url = https://pypi.tuna.tsinghua.edu.cn/simple trusted-host = pypi.tuna.tsinghua.edu.cn 以上","title":"python | 修改 pip 源"},{"content":"\n🏡 关于本站 本博客主要记录一些学习生活，和一些个人觉得值得记录的问题及其解决办法。如果本博客能有哪些内容帮助到了你，那也是极好的。\n👦🏻 博主是谁 网络时代的素质教育漏网之鱼 | 晚睡协会常任理事 | 国家级抬杠运动员 | 中国驰名窝里横 | 国宝级老污龟 | 超水平怼人大师 | 一秒入戏准影帝\n精通CSS、JavaScript、PHP、C、C＋＋、C#、java、Ruby、Perl、Lisp、python等单词的拼写；\n熟悉windows、Linux、Mac、Android、IOS等系统的开关机；\n🏹 兴趣爱好 🏃‍♂️ 跑步 | 🎮️ 游戏 | 🎧 音乐 | 📺 动漫 | 🛌 摆烂\n📈 博客变更记录 2022年9月8日 本博客正式加入 十年之约\n今夕何夕，人生能有几个十年\n2022年7月16日 迁移之前发布在 csdn 的文章，将图片外链全部转为七牛图床\n2022年7月4日 hugo 站点试运行，域名：https://www.Bobby.cn\n2021年8月15日 将阿里云轻量服务器自带的 wordpress 应用改为 docker 应用，wordpress 站点改为 docker-compose 部署\n2021年7月13日 wordpress 博客站点开始运行，域名：https://Bobby.cn\n","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/about/","summary":"🏡 关于本站 本博客主要记录一些学习生活，和一些个人觉得值得记录的问题及其解决办法。如果本博客能有哪些内容帮助到了你，那也是极好的。 👦🏻 博主是谁 网络时代的素质教育漏网之鱼 | 晚睡协会常任理事 | 国家级抬杠运动员 | 中国驰名窝里横 | 国宝级老污龟 | 超水平怼人大师 | 一秒入戏准影帝 精通CSS、Ja","title":"🙋🏻‍♂️ 关于"},{"content":"👉友链为随机顺序\rBobby Blog\r我的 wordpress 站点\rcuikx\u0026#39;s blog\rcuikx\u0026#39;s blog\rSulv\u0026#39;s Blog\r一个记录技术、阅读、生活的博客\r陈桂林博客\r成功最有效的方法就是向有经验的人学习！\r黄忠德的博客\rDevOps,SRE,Python,Golang程序员,开源爱好者\r阿虚同学的储物间\r收集了很多实用网站\r老生杂谈的 IT 人\r老生杂谈，后继有人。\rYunyi’s Blog\rLittle squirrel Hopping around\r👉友链格式\r名称: Bobby's Blog\n网址: https://www.Bobby.cn\n图标: https://www.Bobby.cn/img/avatar.gif\n描述: life is a fucking movie\n👉友链申请要求\r秉承互换友链原则、文章定期更新、不能有太多广告\n","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/links/","summary":"👉友链为随机顺序 Bobby Blog 我的 wordpress 站点 cuikx\u0026#39;s blog cuikx\u0026#39;s blog Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 陈桂林博客 成功最有效的方法就是向有经验的人学习！ 黄忠德的博客 DevOps,SRE,Python,Golang程序员,开源爱好者 阿虚同学的储物间 收集了很多实用网站 老生杂谈的 IT 人 老生杂谈，后继有人。 Yunyi’s","title":"🤝 友链"},{"content":"\r","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/talk/","summary":"","title":"💬 说说"},{"content":"0 前言 本文参考以下链接:\n从能用到好用-快速搭建高性能WordPress指南 前段时间着手开始搭建自己的 wordpress 博客，刚开始图方便直接买了阿里云的轻量应用服务器，它是一套预先搭建好的 lamp 架构，并已经做了一些初始化配置，直接访问 ip 就可以进行 wordpress 的安装和配置了。\n这套 wordpress 的一个非常好的优点就是可以在阿里云的控制台一键配置 https 证书，当然仅限在阿里云购买的 ssl 证书\n后续还是决定将 wordpress 整体迁移到 docker 中，全部服务都用 docker 跑。这样只要数据做好持久化，使用 docker 的灵活性会好很多，做全站备份和迁移也很方便。\n1 备份\u0026amp;迁移 wordpress 迁移起来还是比较方便的，需要备份的内容大概有这些：插件、主题、uploads、数据库\n备份插件：UpdraftPlus，这是一款个人使用过一款比较优秀的备份/迁移插件，免费版的功能基本满足大部分人需求，支持手动备份和定时备份、备份和恢复都支持部分备份，比如只备份数据库，只恢复数据库的某一张表。\n免费版的并不支持 wordpress 迁移，但我们可以通过导入导出备份文件的方式实现站点迁移，前提是做好测试。\n备份步骤：\n在备份插件中手动备份一次 下载备份文件 迁移步骤：\n准备好系统环境和 docker 环境（docker-compose） 启动 docker 容器 http 访问 wordpress 地址初始化安装 安装备份插件和 ssl 插件（really simple ssl） 上传备份文件并进行恢复操作（不恢复 wp-options 表） 为 nginx 反代服务器配置 ssl 证书，开启 https 访问 在 really simple ssl 中为 wordpress 启用 https 恢复 wp-options 表 1.1 手动备份\u0026amp;下载备份文件 备份完之后可以直接从 web 端下载，但是建议从 web 端下载一份，通过 ssh 或者 ftp 等方式再下载一份，避免备份文件出现问题\n备份的文件在 wordpress目录/wp-content/updraft 目录中\n通过 scp 下载到本地\n1.2 准备系统环境 安装好 docker 和 docker-compose 即可，docker 的安装和使用教程在本博客中 docker 分类有\n1.3 docker-compose 一键启动 wordpress 环境 这里我提供了一键部署的 docker-compose 文件和各服务进行了优化的配置文件，可以直接拿来用 下载链接\n注意：\n使用前建议修改数据库相关信息\n建议不要随意改动 ip\n所有的数据文件和配置文件默认都在当前的目录下\n如果前面不加 nginx 反代，记得把注释掉的端口映射改成自己想要的\n所有的配置文件都在 nginx 目录下，已经预先定义好，可以自行进行修改\n内置的 wordpress 目录权限用户和组是 33:tape\nversion: \u0026#39;3.1\u0026#39; services: proxy: image: superng6/nginx:debian-stable-1.18.0 container_name: nginx-proxy restart: always networks: wordpress_net: ipv4_address: 172.19.0.6 ports: - 80:80 - 443:443 volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/conf/proxy/nginx.conf:/etc/nginx/nginx.conf - $PWD/conf/proxy/default.conf:/etc/nginx/conf.d/default.conf - $PWD/ssl:/etc/nginx/ssl - $PWD/logs/proxy:/var/log/nginx depends_on: - web web: image: superng6/nginx:debian-stable-1.18.0 container_name: wordpress-nginx restart: always networks: wordpress_net: ipv4_address: 172.19.0.5 volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/conf/nginx/nginx.conf:/etc/nginx/nginx.conf - $PWD/conf/nginx/default.conf:/etc/nginx/conf.d/default.conf - $PWD/conf/fastcgi.conf:/etc/nginx/fastcgi.conf - /dev/shm/nginx-cache:/var/run/nginx-cache # - $PWD/nginx-cache:/var/run/nginx-cache - $PWD/wordpress:/var/www/html - $PWD/logs/nginx:/var/log/nginx depends_on: - wordpress wordpress: image: wordpress:5-fpm container_name: wordpress-php restart: always networks: wordpress_net: ipv4_address: 172.19.0.4 environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress WORDPRESS_DB_NAME: wordpress volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/wordpress:/var/www/html - /dev/shm/nginx-cache:/var/run/nginx-cache # - $PWD/nginx-cache:/var/run/nginx-cache - $PWD/conf/uploads.ini:/usr/local/etc/php/php.ini depends_on: - redis - db redis: image: redis:5 container_name: wordpress-redis restart: always networks: wordpress_net: ipv4_address: 172.19.0.3 volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/redis-data:/data depends_on: - db db: image: mysql:5.7 container_name: wordpress-mysql restart: always networks: wordpress_net: ipv4_address: 172.19.0.2 environment: MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress MYSQL_RANDOM_ROOT_PASSWORD: \u0026#39;1\u0026#39; volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/mysql-data:/var/lib/mysql - $PWD/conf/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf networks: wordpress_net: driver: bridge ipam: config: - subnet: 172.19.0.0/16 进入到 wordpress-blog 目录下使用 docker-compose up -d 启动 docker 容器\n1.4 配置 nginx 反向代理 配置 80 和 443 端口的反代\n把域名、证书路径以及后端服务器等信息换成自己的\n免费 ssl 证书的申请我在 阿里云wordpress配置免费ssl证书 中介绍过，直接下载 nginx 版的证书放到 wordpress-blog/ssl/目录下即可\n[root@Bobby ~]# vim wordpress-blog/conf/proxy/default.conf server { listen 80; listen [::]:80; server_name Bobby.cn; # return 301 https://$host$request_uri; location / { proxy_pass http://172.19.0.5:80; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Real-Port $remote_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header HTTP_X_FORWARDED_FOR $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $host; proxy_set_header X-NginX-Proxy true; } } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name Bobby.cn; location / { proxy_pass http://172.19.0.5:80; proxy_redirect off; # 保证获取到真实IP proxy_set_header X-Real-IP $remote_addr; # 真实端口号 proxy_set_header X-Real-Port $remote_port; # X-Forwarded-For 是一个 HTTP 扩展头部。 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 在多级代理的情况下，记录每次代理之前的客户端真实ip proxy_set_header HTTP_X_FORWARDED_FOR $remote_addr; # 获取到真实协议 proxy_set_header X-Forwarded-Proto $scheme; # 真实主机名 proxy_set_header Host $host; # 设置变量 proxy_set_header X-NginX-Proxy true; # 开启 brotli proxy_set_header Accept-Encoding \u0026#34;gzip\u0026#34;; } # 日志 access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; # 证书 ssl_certificate /etc/nginx/ssl/Bobby.cn.pem; ssl_certificate_key /etc/nginx/ssl/Bobby.cn.key; # curl https://ssl-config.mozilla.org/ffdhe2048.txt \u0026gt; /path/to/dhparam # ssl_dhparam /etc/nginx/ssl/dhparam; # HSTS (ngx_http_headers_module is required) (63072000 seconds) add_header Strict-Transport-Security \u0026#34;max-age=63072000\u0026#34; always; # OCSP stapling ssl_stapling on; ssl_stapling_verify on; # verify chain of trust of OCSP response using Root CA and Intermediate certs # ssl_trusted_certificate /etc/nginx/ssl/all.sleele.com/fullchain.cer; # replace with the IP address of your resolver resolver 223.5.5.5; resolver_timeout 5s; } [root@Bobby ~]# docker exec -i nginx-proxy nginx -s reload 1.5 安装 wordpress 现在已经可以通过 http 访问 nginx 反代的 80 端口访问 wordpress 了\n安装信息跟之前站点设置一样即可\n1.6 恢复备份 安装好之后启用插件，把备份文件上传到备份目录\n记得修改权限\n[root@Bobby ~]# chown -R 33:tape wordpress-blog/wordpress/wp-content/ 恢复备份\n注：如果站点之前开启了 https，在这步不要恢复 wp-options 表，不然会导致后台访问不了\n点击恢复即可\n1.7 配置 ssl 启用 really simple ssl 插件，因为之前在 nginx 反代配置了 ssl 证书，虽然我们没有通过 https 访问，但是这个插件已经检测到了证书，可以一键为 wordpress 配置 ssl\n这里我们已经可以通过 https 访问我们的 wordpress 了\n站点路径该插件也会自动修改，之前不恢复 wp-options 表的原因就在这，在我们没有配置好 ssl 之前，直接覆盖 wordpress 的各项设置会导致站点访问不了，重定向循环等各种各样的问题。\n1.8 恢复 wp-options 表 开启了 ssl 之后，通过备份插件再恢复一次，可以只恢复一张 wp-options 表，也可以再全量恢复下数据库，至此，站点迁移工作基本完成了。\n2 后续优化 2.1 开启 https 强制跳转 开启 https 强制跳转后，所有使用 http 访问我们站点的请求都会转到 https，提高站点安全性\n[root@Bobby ~]# vim /etc/nginx/nginx.conf server { listen 80; listen [::]:80; server_name Bobby.cn; return 301 https://$host$request_uri; } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name Bobby.cn; location / { proxy_pass http://172.19.0.5:80; proxy_redirect off; # 保证获取到真实IP proxy_set_header X-Real-IP $remote_addr; # 真实端口号 proxy_set_header X-Real-Port $remote_port; # X-Forwarded-For 是一个 HTTP 扩展头部。 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 在多级代理的情况下，记录每次代理之前的客户端真实ip proxy_set_header HTTP_X_FORWARDED_FOR $remote_addr; # 获取到真实协议 proxy_set_header X-Forwarded-Proto $scheme; # 真实主机名 proxy_set_header Host $host; # 设置变量 proxy_set_header X-NginX-Proxy true; # 开启 brotli proxy_set_header Accept-Encoding \u0026#34;gzip\u0026#34;; } # 日志 access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; # 证书 ssl_certificate /etc/nginx/ssl/Bobby.cn.pem; ssl_certificate_key /etc/nginx/ssl/Bobby.cn.key; # curl https://ssl-config.mozilla.org/ffdhe2048.txt \u0026gt; /path/to/dhparam # ssl_dhparam /etc/nginx/ssl/dhparam; # HSTS (ngx_http_headers_module is required) (63072000 seconds) add_header Strict-Transport-Security \u0026#34;max-age=63072000\u0026#34; always; # OCSP stapling ssl_stapling on; ssl_stapling_verify on; # verify chain of trust of OCSP response using Root CA and Intermediate certs # ssl_trusted_certificate /etc/nginx/ssl/all.sleele.com/fullchain.cer; # replace with the IP address of your resolver resolver 223.5.5.5; resolver_timeout 5s; } [root@Bobby ~]# docker exec -i nginx-proxy nginx -s reload 2.2 开启 redis 缓存 wordpress搭配redis加速网站访问速度\n2.3 搭配 jsdelivr-CDN 实现全站 cdn WordPress+jsDelivr开启伪全站CDN\n以上\n","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/posts/blog/wordpress-to-docker/","summary":"0 前言 本文参考以下链接: 从能用到好用-快速搭建高性能WordPress指南 前段时间着手开始搭建自己的 wordpress 博客，刚开始图方便直接买了阿里云的轻量应用服务器，它是一套预先搭建好的 lamp 架构，并已经做了一些初始化配置，直接访问 ip 就可以进行 wordpress 的安装和配置了。 这套 wordpress 的一个非常好的优点就是可以在阿","title":"wordpress | 迁移到 docker"},{"content":"1 七牛云配置 1.1 注册七牛云，新建存储空间 七牛云新用户有 10G 的免费空间，作为个人博客来说基本足够了\n1.2 为存储空间配置加速域名 1.3 配置 https 证书 1.3.1 购买免费证书 1.3.2 补全域名信息 1.3.3 域名验证 根据在域名提供商处新建解析\ndns 配置好之后等待 CA 机构审核后颁发证书就可以了\n1.4.4 开启 https 2 PicGo 配置 2.1 下载安装 下载链接：https://github.com/Molunerfinn/PicGo/releases/\n建议下载稳定版\n2.2 配置七牛云图床 ak 和 sk 在七牛云→个人中心→密钥管理中查看\n在 picgo 端配置各项信息，注意网址要改成 https\n3 typora 测试图片上传 下载地址：https://www.typora.io/\n在文件→偏好设置→图像中配置图片上传，选择安装好的 PicGo 的应用程序\n点击验证图片上传\n到七牛云存储空间看是否有这两个文件\ntypora 可以实现自动的图片上传，并将本地连接自动转换为外链地址\n4 可能的报错 一般报错原因都可在 picgo 的日志文件找到，路径：C:\\Users\\username\\AppData\\Roaming\\picgo\n4.1 failed to fetch 日志报错如下\n问题在于端口冲突，如果你打开了多个 picgo 程序，就会端口冲突，picgo 自动帮你把 36677 端口改为 366771 端口，导致错误。\n重新验证\n以上\n","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/posts/blog/typora-picgo-qiniu-upload-image/","summary":"1 七牛云配置 1.1 注册七牛云，新建存储空间 七牛云新用户有 10G 的免费空间，作为个人博客来说基本足够了 1.2 为存储空间配置加速域名 1.3 配置 https 证书 1.3.1 购买免费证书 1.3.2 补全域名信息 1.3.3 域名验证 根据在域名提供商处新建解析 dns 配置好之后等待 CA 机构审核后颁发证书就可以了 1.4.4 开启 https 2 PicGo 配置 2.1 下载安装 下载链接：http","title":"markdown 图片存储方案 | typora + picgo + 七牛云"},{"content":"1 现象 博客加载不出来我在七牛云的图片资源 使用浏览器直接访问图片 url 却是可以成功的 我将之前 csdn 的博客迁移到了 wordpress，图片外链地址就是 csdn 的，都可以正常加载。 使用浏览器直接访问图片 url 却是可以成功的\n我将之前 csdn 的博客迁移到了 wordpress，图片外链地址就是 csdn 的，都可以正常加载。\n2 排查 1、由于浏览器直接访问七牛云图床的 url 地址是可以访问的，证明地址并没错，有没有可能是 referer 防盗链的配置问题\n查看防盗链配置，并没有开\n2、wordpress 可以加载出来 csdn 的外链图片，期间也试了其他图床都是没问题的。\n3、看看七牛的图片外链和 csdn 的有何区别\n注意到七牛的图片外链是 http，当时嫌麻烦并没有配置 https，看来问题是出在这了\n因为我的网站配置了 ssl 证书，可能由于安全问题浏览器不予加载 http 项目，用 http 访问站点测试下图片是否可以加载\n访问成功了！\n3 解决 给图床服务器安装 ssl 证书，开启 https 访问，参考：typora-picgo-qiniu-upload-image\n以上\n","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/posts/blog/wordpress-load-image-failed/","summary":"1 现象 博客加载不出来我在七牛云的图片资源 使用浏览器直接访问图片 url 却是可以成功的 我将之前 csdn 的博客迁移到了 wordpress，图片外链地址就是 csdn 的，都可以正常加载。 使用浏览器直接访问图片 url 却是可以成功的 我将之前 csdn 的博客迁移到了 wordpress，图片外链地址就是 csdn 的，都可以正常加载。","title":"wordpress | 加载图片失败"},{"content":"默认主题下在后台设置里修改即可\ndux 主题修改方式：在后台管理→dux 主题编辑器→网站底部信息中添加\n\u0026lt;a href=\u0026#34;http://beian.miit.gov.cn/\u0026#34; rel=\u0026#34;external nofollow\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;京ICP备2021023168号-1\u0026lt;/a\u0026gt; 通用修改方式\n在主题目录的 footer.php 文件中的 \u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt; 下添加代码\n\u0026lt;a href=\u0026#34;http://beian.miit.gov.cn/\u0026#34; rel=\u0026#34;external nofollow\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;你的备案号\u0026lt;/a\u0026gt; 以上\n","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/posts/blog/wordpress-add-icp/","summary":"默认主题下在后台设置里修改即可 dux 主题修改方式：在后台管理→dux 主题编辑器→网站底部信息中添加 \u0026lt;a href=\u0026#34;http://beian.miit.gov.cn/\u0026#34; rel=\u0026#34;external nofollow\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;京ICP备2021023168号-1\u0026lt;/a\u0026gt; 通用修改方式 在主题目录的 footer.php 文件中的 \u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt; 下添加代码 \u0026lt;a href=\u0026#34;http://beian.miit.gov.cn/\u0026#34; rel=\u0026#34;external nofollow\u0026#34; target=","title":"wordpress | 添加 icp 备案号"},{"content":"0 前言 本文参考以下链接:\n在 Apache 服务器上安装 SSL 证书 WordPress 强制跳转 https 教程 1 配置 ssl 证书 1、登录阿里云，选择产品中的 ssl 证书\n如果域名是阿里的他会自动创建 dns 解析，如果是其他厂商需要按照图片配置，等待几分钟进行验证\n点击审核，等待签发\n签发后根据需求下载所需证书\n我的 wordpress 是直接买的阿里轻量应用服务器，打开轻量应用服务器的控制台配置域名\n选择刚申请好的 ssl 证书\n在 wordpress 后台修改地址\n大功告成\n2 配置 https 强制跳转 一般站点需要在 httpd.conf 中的 \u0026lt;VirtualHost *:80\u0026gt; \u0026lt;/VirtualHost\u0026gt; 中配置重定向\nwordpress 不同，需要在伪静态文件（.htaccess）中配置重定向，无需在 httpd.conf 中配置\n2.1 修改伪静态文件（.htaccess） 伪静态文件一般在网页根目录，是一个隐藏文件\n在 #END Wordpress 前添加如下重定向代码，记得把域名修改成自己的\nRewriteEngine On RewriteCond %{HTTPS} !on RewriteRule ^(.*)$ https://Bobby.cn/%{REQUEST_URI} [L,R=301] 图中两段重定向代码略有不同\n第一段代码重定向触发器：当访问的端口不是 443 时进行重定向重定向规则：重定向到：https://{原域名}/{原 url 资源} 第二段代码重定向触发器：当访问的协议不是 TLS/SLL（https）时进行重定向重定向规则：重定向到：https://Bobby.cn/{原 url 资源} 第一段代码使用端口判断，第二段代码通过访问方式判断，建议使用访问方式判断，这样服务改了端口也可以正常跳转 第一段代码重定向的原先的域名，第二段代码可以把 ip 地址重定向到指定域名 2.2 测试 curl -I http://Bobby.cn 使用 http 访问站点的 80 端口成功通过 301 跳转到了 https\n以上\n","permalink":"https://bobby-sheng.github.io/BobbySheng.github.io/en/posts/blog/wordpress-ssl/","summary":"0 前言 本文参考以下链接: 在 Apache 服务器上安装 SSL 证书 WordPress 强制跳转 https 教程 1 配置 ssl 证书 1、登录阿里云，选择产品中的 ssl 证书 如果域名是阿里的他会自动创建 dns 解析，如果是其他厂商需要按照图片配置，等待几分钟进行验证 点击审核，等待签发 签发后根据需求下载所需证书 我的 wordpress 是直接买的阿里轻量应用服务器，打开轻","title":"wordpress | 配置免费 ssl 证书和 https 强制跳转"}]